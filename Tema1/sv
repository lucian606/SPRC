/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "rpc_db.h"
#include <iostream>
#include <map>

#define USER_EXISTS -1
#define SUCCESS 0
#define ERROR 1

std::map<std::string, long> users;
std::map<std::string, std::map<int, struct SensorData>> dataBase;
int currentKey = 0;

int *
add_1_svc(struct UserPackage *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	std::cout << "Add called from: " << argp->name << std::endl;

	return &result;
}

int *
delete_1_svc(struct SpecificId *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *
update_1_svc(struct UserPackage *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *
read_1_svc(struct SpecificId *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	return &result;
}

char **
getstat_1_svc(struct SpecificId *argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return &result;
}

char **getstatall_1_svc(char **argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *load_1_svc(char **argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	return &result;
}

char **store_1_svc(char **argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *login_1_svc(char **argp, struct svc_req *rqstp) {
	static int result;
	
	if (users.find(*argp) == users.end()) {
		std::cout << "A new user has logged in: " << *argp << std::endl;
		users[*argp] = currentKey;
		result = currentKey;
		currentKey += 1;
	} else {
		std::cout << "User exists: " << *argp << std::endl;
		result = USER_EXISTS;
	}

	return &result;
}

int *logout_1_svc(char **argp, struct svc_req *rqstp) {
	static int  result;

	if (users.find(*argp) == users.end()) {
		std::cout << "Invalid logout from: " << *argp << std::endl;
		result = ERROR;
	} else {
		std::cout << "User logout: " << *argp << std::endl;
		users.erase(*argp);
		dataBase.erase(*argp);
		result = SUCCESS;
	}

	return &result;
}
