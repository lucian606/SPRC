/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "rpc_db.h"
#include <string>
#include <map>
#include <iostream>

#define OK 0
#define USER_EXISTS -1
#define ERROR -1

int currentId = 0;

std::map<std::string, int> loggedUsers;
std::map<std::string, std::map<int, struct SensorData>> dataBase;

int *
add_1_svc(struct UserPackage *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */
	struct SensorData data = argp->data;
	std::cout << "Received data from user: " << argp->name << std::endl;
	std::cout << "Here are the received values: ";
	for (int i = 0; i < data.noValues; i++) {
		std::cout << data.value.value_val[i] << " ";
	}

	dataBase[argp->name][data.dataId] = data;

	std::cout << std::endl;

	return &result;
}

int *
delete_1_svc(struct SpecificId *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *
update_1_svc(struct UserPackage *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *
read_1_svc(struct SpecificId *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */
	int noValues = dataBase[argp->name][argp->dataId].noValues;
	float *values = dataBase[argp->name][argp->dataId].value.value_val;

	std::cout << "User wants to read data: " << argp->name << std::endl;

	std::cout << "  Data id: " << argp->dataId << std::endl;
	std::cout << "  Data size: " << dataBase[argp->name][argp->dataId].noValues << std::endl;
	std::cout << "  Data: ";
	for (int i = 0; i < noValues; i++)
		std::cout << values[i] << " ";
	std::cout << std::endl;

	return &result;
}

char **
getstat_1_svc(struct SpecificId *argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return &result;
}

char **
getstatall_1_svc(char **argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *
load_1_svc(char **argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	return &result;
}

char **
store_1_svc(char **argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return &result;
}

int *
login_1_svc(char **argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

	if (loggedUsers.find(*argp) == loggedUsers.end()) {
		std::cout << "User logged in: " << *argp << std::endl;
		loggedUsers[*argp] = currentId;
				result = currentId;
		currentId++;
	} else {
		std::cout << "User was already logged in: " << *argp << std::endl;
		result = USER_EXISTS;
	}


	return &result;
}

int *
logout_1_svc(char **argp, struct svc_req *rqstp)
{
	static int  result = SUCCESS;

	/*
	 * insert server code here
	 */
	if (loggedUsers.find(*argp) == loggedUsers.end()) {
		std::cout << "User is not logged in: " << *argp << std::endl;
		result = ERROR;
	} else {
		loggedUsers.erase(*argp);
		dataBase.erase(*argp);
		std::cout << "User was logged out: " << *argp << std::endl;
		result = OK;
	}


	return &result;
}
